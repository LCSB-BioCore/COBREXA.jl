stages:
  - formatter
  - documentation
  - test-containers
  - test-required
  - test-additional-v1.5
  - test-additional-v1.6

variables:
    GIT_STRATEGY: clone

.global_settings: &global_settings
  rules:
   - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"

.global_settings: &global_settings_master
  rules:
   - if: $CI_COMMIT_BRANCH == "master"

.global_testing_v15: &global_testing_v15
  variables:
    JULIA_VER: "v1.5.3"

.global_testing_v16: &global_testing_v16
  variables:
    JULIA_VER: "v1.6.0"

# platform-specific test settings
# --------------------------------------

.global_testing_linux: &global_testing_linux
  tags:
   - slave01
  script:
    - $ARTENOLIS_SOFT_PATH/julia/$JULIA_VER/bin/julia --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'

.global_testing_win8: &global_testing_win8
  tags:
    - windows8

.global_testing_win10: &global_testing_win10
  tags:
    - windows10

.global_testing_win: &global_testing_win
  script:
    - $global:LASTEXITCODE = 0 # Note the global prefix.
    - Invoke-Expression $Env:ARTENOLIS_SOFT_PATH"\julia\"$Env:JULIA_VER"\bin\julia --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'"
    - exit $LASTEXITCODE

.global_testing_mac: &global_testing_mac
  tags:
    - mac
  script:
    - $ARTENOLIS_SOFT_PATH/julia/$JULIA_VER/Contents/Resources/julia/bin/julia --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'

# Check the format of the code
# --------------------------------------

format:
  stage: formatter
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    - julia --project=@. -e 'using JuliaFormatter; format(".", verbose=true);'
    - git status
    - git remote set-url origin "https://$CI_USER_NAME:$GIT_ACCESS_TOKEN@github.com/$GITHUB_REPOSITORY"
    - git config --global user.name $CI_USER_NAME
    - git config --global user.email $CI_USER_EMAIL
    - git checkout $CI_COMMIT_BRANCH || true
    - git commit -am "automatic formatting changes" || true
    - git push origin $CI_COMMIT_BRANCH || true
  <<: *global_settings

# Documentation tests
# --------------------------------------

doc-tests:v1.6:
  stage: documentation
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    - julia --project=@. -e 'import Pkg; Pkg.instantiate();'
    - julia --project=@. --color=yes test/doctests.jl
  <<: *global_settings

# Test Docker run with Julia v1.6
# --------------------------------------

docker:v1.6:
  stage: test-containers
  image: $CI_REGISTRY/r3/docker/julia-custom
  tags:
    - slave02
  script:
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
  after_script:
    - julia --project=test/coverage test/coverage/coverage-summary.jl
  <<: *global_settings

# Test Julia v1.5
# --------------------------------------

linux:v1.5:
  stage: test-required
  <<: *global_settings_master
  <<: *global_testing_v15
  <<: *global_testing_linux

windows10:v1.5:
  stage: test-additional-v1.5
  <<: *global_settings_master
  <<: *global_testing_v15
  <<: *global_testing_win10
  <<: *global_testing_win

windows8:v1.5:
  stage: test-additional-v1.5
  <<: *global_settings_master
  <<: *global_testing_v15
  <<: *global_testing_win8
  <<: *global_testing_win

mac:v1.5:
  stage: test-additional-v1.5
  <<: *global_settings_master
  <<: *global_testing_v15
  <<: *global_testing_mac

# Test Julia v1.6
# --------------------------------------

linux:v1.6:
  stage: test-additional-v1.6
  needs: ["linux:v1.5"]
  <<: *global_settings_master
  <<: *global_testing_v16
  <<: *global_testing_linux

windows10:v1.6:
  stage: test-additional-v1.6
  needs: ["windows10:v1.5"]
  <<: *global_settings_master
  <<: *global_testing_v16
  <<: *global_testing_win10
  <<: *global_testing_win

windows8:v1.6:
  stage: test-additional-v1.6
  needs: ["windows8:v1.5"]
  <<: *global_settings_master
  <<: *global_testing_v16
  <<: *global_testing_win8
  <<: *global_testing_win

mac:v1.6:
  stage: test-additional-v1.6
  needs: ["mac:v1.5"]
  <<: *global_settings_master
  <<: *global_testing_v16
  <<: *global_testing_mac

# Deploy the documentation
# --------------------------------------

pages:
  stage: documentation
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    - julia --project=docs -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd()))'
    - julia --project=docs --color=yes docs/make.jl
    - mv docs/build public # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  <<: *global_settings_master
